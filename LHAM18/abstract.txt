\title{
Performance evaluation and visualization of scientific applications using PMlib
}


\begin{abstract}
Sustained computational performance of scientific applications on HPC systems
is often observed much lower than the maximum system performance.
Understanding this gap requires multi-perspective analysis, i.e., the system
architecture perspective to evaluate the characteristics of micro architecture
elements such as processor core and memory, and the applications perspective
to correlate the theoretical computation coded as the source program with the
computation workload produced by compilers.
The authors developed PMlib open source library to address such synthetic analysis.
PMlib provides the way to report the arithmetic workload counted manually from
the source code, as well as the actually executed system workload.
It also provides the detail utilization report of processor specific hardware
including the categorized SIMD instruction statistics, the layered cache
hit/miss rate, and the corresponding bandwidth up to memory,
which are captured via hardware performance counters (HWPC).
Using of PMlib, users can conduct synthetic analysis of the application
performance, and obtain the hint for further optimized execution of applications.
\end{abstract}


\begin{mainbody}

The purpose of this research.
In the development and the productive phase of the scientific application,
the performance evaluation is frequently conducted on the target HPC systems.
Such evaluation is intended to understand the performance characteristics
of the application on the target system, and to explore the possibility of
applying further optimization to the software for elapsed time reduction.

As the background of such evaluation, there is well known fact that 
the sustained computational performance of scientific applications on HPC
systems can be much lower than the theoretical maximum performance
expected from the system specification, depending on the type of applications.

\cite{}

There have been many prededing studies to account for this gap between
the achieved performance and the maximum performance, mostly from architecture
point of view,
some mentioning the difficulty of utilizing parallel arithmetic functional units,
some mentioning the locality of data residing on memory/cache hiererchy.

\cite{}

The performance is measured in the unit of conducted workload / elapsed time.
We should remind that the definition of workload measurement can vary,
usually chosen from one of the the followings,
the arithmetic workload defined by the applications in their source program,
and the system workload actually executed on HPC systems that is represented as
machine instructions which is measured with hardware performance counters (HWPC).
The difference in the performance based on these two workload definitions
can be significant as explained in the later section \ref{},
and is sometimes confusing to application users.

%	This difference should not be overlooked when conducting the performance evaluation.
%	Obvious relational effect of job manager and the system workload is not
%	the focus of this paper.
%	not to mention the variety of the arithmetic instructions available on the
%	target HPC system.


PMlib has the functionality of



\subsection{micro architecture elements}
In system architecture perspective,
micro architecture elements, above all, the number of computing cores
in the processor, the degree of parallelizm inside the core,
the depth of cache/memory hierarchy and the data move rate at each hierarchy
all have relational impact to how the machine instructions are executed,
thus leading to sustained computing performance.

\subsection{application workload}
In applications perspective,
the numerical computation workload represented as the application source code
will be compiled to much heavier workload, in general.
This workload translation can not be overlooked by performance conscious users.

\subsection{PMlib addresses it!}
PMlib has the feature


To address these perspectives and to provide simple interface for reporting,
we develop an open source library PMlib.

PMlib provides the way to report the numerical workload repersented
as the source code, as well as the actual workload executed on the system
measured with hardware performance counters(HWPC).

It also provides the processor specific hardware utilization report
including categorized SIMD instruction statistics,
layered cache hit/miss rate, and the corresponding bandwidth upto memory.
It utilizes PAPI low level API for obtaining HWPC event statistics.

\subsection{conclusion}
Through the use of PMlib, users can conduct synthetic analysis of the
application performance characteristics, and obtain the hint for
further optimized execution of the application.


efficient
effective

and to improve the application performance
computational performance of scientific applications
computational performance v.s. computing performance.
numerical performance v.s. system performance
evaluation criteria
evaluation axis

\end{mainbody}

